import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

enum TableStatus { idle, loading, ready, error }
enum ItemType { beer, coffee, nation, none }

class DataService {
  final ValueNotifier<Map<String, dynamic>> tableStateNotifier =
      ValueNotifier({
    'status': TableStatus.idle,
    'dataObjects': [],
    'itemType': ItemType.none,
  });

  void carregar(int index) {
    final itemTypes = [ItemType.coffee, ItemType.beer, ItemType.nation];
    final urls = [
      Uri(
          scheme: 'https',
          host: 'random-data-api.com',
          path: 'api/coffee/random_coffee',
          queryParameters: {'size': '10'}),
      Uri(
          scheme: 'https',
          host: 'random-data-api.com',
          path: 'api/beer/random_beer',
          queryParameters: {'size': '10'}),
      Uri(
          scheme: 'https',
          host: 'random-data-api.com',
          path: 'api/nation/random_nation',
          queryParameters: {'size': '10'})
    ];
    final propertyNamesList = [
      ["blend_name", "origin", "variety"],
      ["name", "style", "ibu"],
      ["nationality", "capital", "language", "national_sport"]
    ];
    final columnNamesList = [
      ["Nome", "Origem", "Tipo"],
      ["Nome", "Estilo", "IBU"],
      ["Nome", "Capital", "Idioma", "Esporte"]
    ];

    carregarDados(itemTypes[index], urls[index], propertyNamesList[index],
        columnNamesList[index]);
  }

  void carregarDados(ItemType itemType, Uri uri, List<String> propertyNames,
      List<String> columnNames) {
    if (tableStateNotifier.value['status'] == TableStatus.loading) return;
    if (tableStateNotifier.value['itemType'] != itemType) {
      tableStateNotifier.value = {
        'status': TableStatus.loading,
        'dataObjects': [],
        'itemType': itemType
      };
    }

    http.read(uri).then((jsonString) {
      var jsonData = jsonDecode(jsonString);
      if (tableStateNotifier.value['status'] != TableStatus.loading)
        jsonData = [
          ...tableStateNotifier.value['dataObjects'],
          ...jsonData
        ];

      tableStateNotifier.value = {
        'itemType': itemType,
        'status': TableStatus.ready,
        'dataObjects': jsonData,
        'propertyNames': propertyNames,
        'columnNames': columnNames
      };
    }).catchError((error) {
      tableStateNotifier.value = {
        'status': TableStatus.error,
        'dataObjects': [],
        'itemType': itemType,
      };
    });
  }
}

final dataService = DataService();

void main() {
  MyApp app = MyApp();
  runApp(app);
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(primarySwatch: Colors.deepPurple),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: ValueListenableBuilder(
          valueListenable: dataService.tableStateNotifier,
          builder: (_, value, __) {
            int itemCount = value['dataObjects']?.length ?? 0;
            return AppBar(
              title: Text("Dicas ($itemCount)"),
            );
          },
        ),
        body: ValueListenableBuilder(
          valueListenable: dataService.tableStateNotifier,
          builder: (_, value, __) {
            switch (value['status']) {
              case TableStatus.idle:
                return Center(child: Text("Toque algum botão, abaixo..."));
              case TableStatus.loading:
                return Center(child: CircularProgressIndicator());
              case TableStatus.ready:
                return ListWidget(
                  jsonObjects: value['dataObjects'],
                  propertyNames: value['propertyNames'],
                  scrollEndedCallback: () =>
                      dataService.carregar(ItemType.values.indexOf(value['itemType'])),
                );
              case TableStatus.error:
                return Center(child: Text("Ocorreu um erro ao carregar os dados."));
              default:
                return Text("...");
            }
          },
        ),
        bottomNavigationBar: NewNavBar(itemSelectedCallback: dataService.carregar),
      ),
    );
  }
}

class NewNavBar extends HookWidget {
  final Function _itemSelectedCallback;

  NewNavBar({this._itemSelectedCallback});

  @override
  Widget build(BuildContext context) {
    var state = useState(1);

    return BottomNavigationBar(
      onTap: (index) {
        state.value = index;
        _itemSelectedCallback(index);
      },
      currentIndex: state.value,
      items: const [
        BottomNavigationBarItem(
          label: "Cafés",
          icon: Icon(Icons.coffee_outlined),
        ),
        BottomNavigationBarItem(
          label: "Cervejas",
          icon: Icon(Icons.local_drink_outlined),
        ),
        BottomNavigationBarItem(
          label: "Nações",
          icon: Icon(Icons.flag_outlined),
        ),
      ],
    );
  }
}

class ListWidget extends HookWidget {
  final Function _scrollEndedCallback;
  final List jsonObjects;
  final List<String> propertyNames;

  ListWidget({
    this.jsonObjects = const [],
    this.propertyNames = const [],
    this._scrollEndedCallback,
  });

  @override
  Widget build(BuildContext context) {
    var controller = useScrollController();
    useEffect(() {
      controller.addListener(() {
        if (controller.position.pixels == controller.position.maxScrollExtent) {
          print('end of scroll');
          if (_scrollEndedCallback is Function) _scrollEndedCallback();
        }
      });
    }, [controller]);

    return ListView.separated(
      controller: controller,
      padding: EdgeInsets.all(10),
      separatorBuilder: (_, __) => Divider(
        height: 5,
        thickness: 2,
        indent: 10,
        endIndent: 10,
        color: Theme.of(context).primaryColor,
      ),
      itemCount: jsonObjects.length + 1,
      itemBuilder: (_, index) {
        if (index == jsonObjects.length)
          return Center(child: LinearProgressIndicator());
        var title = jsonObjects[index][propertyNames[0]];
        var content = propertyNames
            .sublist(1)
            .map((prop) => jsonObjects[index][prop])
            .join(" - ");

        return Card(
          shadowColor: Theme.of(context).primaryColor,
          child: Column(
            children: [
              SizedBox(height: 10),
              Text(
                "${title}\n",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text(content),
              SizedBox(height: 10),
            ],
          ));
      }
    );
  }
}
